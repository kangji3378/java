3/8
스프링 =>
    1. 프레임워크
        프레임워크 = 틀 내에서 문제를 해결하는 데 사용되는 도구
    2. 오픈소스
        소스코드가 공개, 내부를 고칠 수 있다.(나중 이야기)
        무료
    3. IoC 컨테이너를 가짐
        IoC = Inversion of Controll 제어권의 역전
        객체의 생성을 책임지고 의존성을 관리한다.
        class 설계도, 변수와 메서드의 집합
        object 객체, 구현할 대상, 클래스에 선언된 모양 그대로 생성된 실체
        instance 구현된 구체적인 실체, 메모리에 할당되어 실제 사용됨 : 객체>인스턴스
        class   -필드 : 속성을 표현
                -메소드 : 기능을 표현
            ex>
                    오브젝트 (메서드)
            의자    s= new 의자();
                    public void make(){
                        의자 s= new 의자(); --------@@heap 메모리(컨테이너)에 둘이 올라감
                    }                               둘은 다른 의자 (이렇게 될 시 공유하기 힘들어짐)
                    public void use(){                 => 스프링 => 객체들을 잇는다
                        의자 s= new 의자(); --------
                    }
        IoC 스프링이 객체들을 읽고 메모리에 올려줌
    4. DI지원
        내가 원하는 모든 메소드에서 메모리에 저장된 객체들을 사용할 수 있음(싱글톤)
    5. 많은 필터
        필터 = HTTP요청과 응답을 변경할 수 있는 코드(객체),
        톰캣 => 필터(web.xml)
        스프링컨테이너 => 인터셉터(AoP)
    6. 많은 어노테이션
        컴파인체킹
        어노테이션(주석+힌트) <- 컴파일러가 무시x
        리플렉션(분석하는 기법-> 런타입시 분석)=>
        //(주석) <-컴파일러가 무시
        스프링-> 어노테이션으로 객체 생성
        ex> @compont-> 클래스 메모리에 로딩
            @Autowired -> 코딩된 객체를 해당 변수에 집어넣어
                @compont        IoC(스캔)
                class A S <---------------heap메모리 공간에 A 로드

                class B{
                    @Autowired      분석(리플렉션)
                    A a;            (heap메모리 공간에 있는 A가 들어감)
                }

// 무슨 말인지 이해 못하겠음, 자바 공부 시작