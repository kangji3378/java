3/8
스프링이란 무엇인가ㄴ
1. 프레임워크
	프레임워크 = 틀 내에서 문제를 해결하는 데 사용되는 도구
2. 오픈소스
	소스코드가 공개, 내부를 고칠 수 있다.(나중 이야기)
	무료
3. IoC 컨테이너를 가짐
		IoC = Inversion of Controll 제어권의 역전
	객체의 생성을 책임지고 의존성을 관리한다.
	class 설계도, 변수와 메서드의 집합
	object 객체, 구현할 대상, 클래스에 선언된 모양 그대로 생성된 실체
	instance 구현된 구체적인 실체, 메모리에 할당되어 실제 사용됨 : 객체>인스턴스
	class  	-필드 : 속성을 표현
			-메소드 : 기능을 표현
	ex>
		오브젝트 (메서드)

		의자 s= new 의자();

		public void make(){
				의자 s= new 의자(); --------A	heap 메모리(컨테이너)에 둘이 올라감
		}                               			A,B 둘은 다른 의자 (이렇게 될 시 공유하기 힘들어짐)
		public void use(){                 			=> 스프링이 객체들을 잇는다
				의자 s= new 의자(); --------B
		}
		IoC 스프링이 객체들을 읽고 메모리에 올려줌
4. DI지원
		내가 원하는 모든 메소드에서 메모리에 저장된 객체들을 사용할 수 있음(싱글톤)
5. 많은 필터
		필터 = HTTP요청과 응답을 변경할 수 있는 코드(객체),
		톰캣 => 필터(web.xml)
		스프링컨테이너 => 인터셉터(AoP)
6. 많은 어노테이션
		컴파인체킹
		어노테이션(주석+힌트) <- 컴파일러가 무시x
		리플렉션(어떤 클래스가 어떤것들을 들고있는지 분석하는 기법-> 런타입시 분석)=>
		//(주석) <-컴파일러가 무시
		스프링-> 어노테이션으로 객체 생성
		ex> 	@compont-> 클래스 메모리에 로딩
				@Autowired -> 로딩된 객체를 해당 변수에 집어넣어
					@compont        IoC(스캔)	(라는 약속이 있을때)
					class A S <---------------heap메모리 공간에 A 로드
					class B{
						@Autowired      분석(리플렉션)
						A a;            (heap메모리 공간에 있는 A가 들어감)
					}

// 무슨 말인지 이해 못하겠음, 자바 공부 시작

3/13
// 자바공부 일단락 다시 스프링 개념공부 시작.

7. 스프링은 MessageConverter을 가지고 있고, 기본값은 현재 Json이다.
	Json=> 중간언어 
	ex>	자바오브젝트 <---json---> 파이썬오브젝트
	메시지컨버터
		자바오브젝트를 다른 곳으로 전송할 때 중간데이터인 Json으로 컨버터해주는 것
	
	자바오브젝트---메시지컨버터:Jackson(Json데이터로 변경해주는 라이브러리)---Json--->>파이썬프로그램
8. 스프링은 BufferedReader와 BufferedWriter를 쉽게 사용할 수 있다.
	8비트= 1바이트 : 통신의 단위

	ByteStream(1바이트를 보냄)->InputStream	->Char(복잡함)
										   ->InputStreamReader(바이트를 문자로 바꿔 문자 1개를 준다. or 배열로 여러개의 문자를 받을 수 있음)
												but 배열은 크기를 정해줘야함(공간 낭비가 심해서 안씀)
										   ->BufferedReader(가변길이의 문자를 받을 수 있다.)
	상대방이 데이터를 요청할 때 요청 때 담겨진 데이터를 BufferedReader로 받는다. (ex>request.getReader())
	이후 데이터를 쓸 때도 BufferedWriter(내려쓰기가 없어서 java에서는 주로 Printwriter(ex> print(), println()) 를 쓴다.) 를 쓴다.
	즉 BufferedWriter는 ByteStream를 통해서 전송할 때 전송단위가 문자열로 가변길이의 데이터를 쓰게 해주는 클래스=>어노테이션 @ResponseBody -> BufferedWriter 동작
																														@RequestBody -> BufferedReader 동작


JPA란 무엇인가
