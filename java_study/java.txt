점프 투 자바 + 생활코딩으로 자바공부
3/9
자바의 특징
간단, 객체지향, 인터프리터, 강력, 안전, 플랫폼이 독립적, 멀티 쓰레딩, 동적
인터프리터 :  프로그래밍 언어의 소스 코드를 바로 실행, 원시 코드를 기계어로 번역하는 컴파일러와 대비
메서드: 함수(클래스내의)=>자바는 모든 것이 클래스 기반이므로 함수=메서드이다

GuGu.java       메서드,객체,for문
    객체와 변수의 차이: 데이터타입의 변수를 사용하기 위해서는 단순히 선언한 후 값을 할당하면 된다.
                       객체의 경우 선언 후에 메모리를 할당해야만 사용할 수 있는 것이다.=>인스턴스화를 해야지 사용할 수 있다?

Structure.java     자바 소스코드의 구조
    main 함수에 public,static,String args를 붙이는 이유:
        static: 객체를 생성하지 않아도 자동으로 실행되어 작업을 수행해야 하므로 static선언
        public: main 함수가 어디있던 실행되어야 하므로 public선언
        String args:    자바를 커맨드라인에서 실행할 때 매개변수를 지원해주기 위해 기본으로 사용

변수와 자료형
    변수가 있는 이유:
        중복의 제거, 가독성,유지보수 용이성이 증가
    변수명 숫자시작x,특수문자x,키워드를 변수명으로 사용 불가
    변수명 앞의 int,String 등은 자료형이다.(ex> int n; => 변수 n은 int 자료형 변수이다.)
    자료형은 int,long,double,char,String...뿐만 아니라 사용자가 직접 자료형을 만들 수 있다.
    ex> class Animal{} =>Animal 클래스를 만들면 Animal cat; 과 같은 Animal 자료형 변수를 만들 수 있다.

데이터의 크기
    8bit=1bite
    이후부터 1024*

명명 규칙(관행)
    클래스명:   클래스명은 명사로 한다. 여러 단어가 섞일 경우 각 단어의 첫글자는 대문자
    메서드명:   메서드명은 동사로 한다. 여러 단어가 섞일 경우 각 단어의 첫글자는 대문자지만 처음 시작 단어는 소문자
    변수명:     변수 이름은 짧지만 의미가 있어야 한다. 즉 변수명을 통해 변수의 사용 의도를 알 수 있게 지어야 한다

자료형:
    숫자
        정수 
            int,long    (차이: 표현범위)
        실수
            float,double    (차이: 표현범위)
        8진수,16진수
            0으로 시작하면 8진수,0x로 시작하면 16진수가 된다.   (ex>int octal = 023; int hex = 0xC;)
        증감연산   ++, --
    불
        boolean (ex>boolean isSuccess = true;)
    문자
        char ''
    문자열
        String  ""
    배열
        자료형[] 배열명(변수) = {값1,값2 ...};
        or
        자료형[] 배열명(변수) = new 자료형[배열의 길이]

제어문
    if문
        구조
            if (조건문) {
                <수행할 문장1>;
                <수행할 문장2>;
                ...
            } else if (조건문) {
                <수행할 문장1>
                <수행할 문장2>
                ...
            } else {
                <수행할 문장A>;
                <수행할 문장B>;
                ...
            }
        boolean,x||y(x or y), x&&y(x and y),!x(not x)

    swich,case문
        구조
            switch(입력변수) {
                case 입력값1: ...
                    break;          //break문이 없을 경우 밑의 case까지 전부 실행됨
                case 입력값2: ...
                    break;
                ...
                default: ...
                    break;
            }
        입력값이 정형화되어 있는 경우 if문보다는 switch/case문을 쓰는것이 가독성에서 좀 더 유리하다.(몇가지 제한된 데이터타입만을 사용할 수 있다.)

    while문
        구조
            while (종료조건) {
                <수행할 문장1>;
                <수행할 문장2>;
                <수행할 문장3>;
                ...
            }

    for문
        구조
            for (초기치; 종료조건; 반복실행) {
                반복적으로 실행할 구문
            }
        초기값이 있고, 언제까지 반복할 것인지에 대한 조건, 반복될 때마다 초기값을 변경시켜주는 구성이 있는 반복문
        =>for문 > while문
    
    for-each문
            String[] numbers = {"one", "two", "three"};
            for(String number: numbers) {
                System.out.println(number);
            }
        배열의 내용을 탐색할 때 for문을 더 간편히 사용할 수 있다.


객체
    클래스
        ObjectSample.java 참조
            클래스에 선언된 변수:객체변수
            메서드를 이용해서 객체변수에 값을 대입가능: ObjectSample.java 내에서 setName 메서드 참조
    메소드
        입력을 가지고 어떤 일을 수행한 다음에 결과물을 내어놓는 작업을 함
        입력과 출력
            메소드의 입력 변수: 매개변수(parameter)
                매개변수와 인수 차이
                    매개변수는 메소드에 입력으로 전달된 값을 받는 변수, 인수는 메소드를 호출할 때 전달하는 입력값
            메소드의 출력값: return
                메서드명 왼쪽=> 출력값의 자료형

                로컬변수에 대한 헷갈림
                    입력값이 객체일 경우는 변경된 속성값이 유지된다?=> 입력값이 객체인 경우 TestLocal.java참조

        구조
            리턴자료형 메소드명(입력자료형1 매개변수1, 입력자료형2 매개변수2, ...) {
                ...    
                return 리턴값;  // 리턴자료형이 void 인 경우에는 return 문이 필요없다.
            }

        main 메소드에 대해서
            Method1.java 참조
//점프투파이썬 메소드까지 함
3/10
상속
Animals.java 참조
    