3/8
스프링이란 무엇인가
	1. 프레임워크
		프레임워크 = 틀 내에서 문제를 해결하는 데 사용되는 도구
	2. 오픈소스
		소스코드가 공개, 내부를 고칠 수 있다.(나중 이야기)
		무료
	3. IoC 컨테이너를 가짐
			IoC = Inversion of Controll 제어권의 역전
		객체의 생성을 책임지고 의존성을 관리한다.
		class 설계도, 변수와 메서드의 집합
		object 객체, 구현할 대상, 클래스에 선언된 모양 그대로 생성된 실체
		instance 구현된 구체적인 실체, 메모리에 할당되어 실제 사용됨 : 객체>인스턴스
		class  	-필드 : 속성을 표현
				-메소드 : 기능을 표현
		ex>
			오브젝트 (메서드)

			의자 s= new 의자();

			public void make(){
					의자 s= new 의자(); --------A	heap 메모리(컨테이너)에 둘이 올라감
			}                               			A,B 둘은 다른 의자 (이렇게 될 시 공유하기 힘들어짐)
			public void use(){                 			=> 스프링이 객체들을 잇는다
					의자 s= new 의자(); --------B
			}
			IoC 스프링이 객체들을 읽고 메모리에 올려줌
	4. DI지원
			내가 원하는 모든 메소드에서 메모리에 저장된 객체들을 사용할 수 있음(싱글톤)
	5. 많은 필터
			필터 = HTTP요청과 응답을 변경할 수 있는 코드(객체),
			톰캣 => 필터(web.xml)
			스프링컨테이너 => 인터셉터(AoP)
	6. 많은 어노테이션
			컴파인체킹
			어노테이션(주석+힌트) <- 컴파일러가 무시x
			리플렉션(어떤 클래스가 어떤것들을 들고있는지 분석하는 기법-> 런타입시 분석)=>
			//(주석) <-컴파일러가 무시
			스프링-> 어노테이션으로 객체 생성
			ex> 	@compont-> 클래스 메모리에 로딩
					@Autowired -> 로딩된 객체를 해당 변수에 집어넣어
						@compont        IoC(스캔)	(라는 약속이 있을때)
						class A S <---------------heap메모리 공간에 A 로드
						class B{
							@Autowired      분석(리플렉션)
							A a;            (heap메모리 공간에 있는 A가 들어감)
						}

// 무슨 말인지 이해 못하겠음, 자바 공부 시작

3/13
// 자바공부 일단락 다시 스프링 개념공부 시작.

	7. 스프링은 MessageConverter을 가지고 있고, 기본값은 현재 Json이다.
		Json=> 중간언어 
		ex>	자바오브젝트 <---json---> 파이썬오브젝트
		메시지컨버터(ex>jackson)
			자바오브젝트를 다른 곳으로 전송할 때 중간데이터인 Json으로 컨버터해주는 것
	
		자바오브젝트---메시지컨버터:Jackson(Json데이터로 변경해주는 라이브러리)---Json--->>파이썬프로그램

	8. 스프링은 BufferedReader와 BufferedWriter를 쉽게 사용할 수 있다.
		8비트= 1바이트 : 통신의 단위

		ByteStream(1바이트를 보냄)->InputStream	->Char(복잡함)
											->InputStreamReader(바이트를 문자로 바꿔 문자 1개를 준다. or 배열로 여러개의 문자를 받을 수 있음)
													but 배열은 크기를 정해줘야함(공간 낭비가 심해서 안씀)
											->BufferedReader(가변길이의 문자를 받을 수 있다.)
		상대방이 데이터를 요청할 때 요청 때 담겨진 데이터를 BufferedReader로 받는다. (ex>request.getReader())
		이후 데이터를 쓸 때도 BufferedWriter(내려쓰기가 없어서 java에서는 주로 Printwriter(ex> print(), println()) 를 쓴다.) 를 쓴다.
		즉 BufferedWriter는 ByteStream를 통해서 전송할 때 전송단위가 문자열로 가변길이의 데이터를 쓰게 해주는 클래스=>어노테이션 @ResponseBody -> BufferedWriter 동작
																															@RequestBody -> BufferedReader 동작

JPA란 무엇인가
	1. Java Persistence API 이다.
		Persistence: 데이터를 생성한 프로그램이 종료되더라도 사라지지 않는 데이터의 특성
			ex> RAM(전기로 저장): 휘발성 데이터(컴퓨터 꺼질시 데이터 다 사라짐) -> 하드디스크(기록):비휘발성
		JPA: 자바에 있는 데이터를 영구히 기록할 수 있는 환경의 API
		API: 애플리케이션 프로그래밍 인터페이스, 프로그램을 프로그래밍하는 인터페이스
			인터페이스: 		프로토콜 				| 			인터페이스
						약속	:동등한 관계에서의 약속				:상하관계가 존재하는 약속
		즉 JPA는 자바 프로그래밍을 할 때 영구적으로 데이터 저장에 필요한 인터페이스

	2. ORM 기술이다.
		Object Relational Mapping
			원래 데이터 테이블을 만들고 이를 Input(DML: delete,update,insert),Output 하기 위해 DB상의 데이터를 자바로 모델링
			but TRM(Table)이 아니라 ORM이므로 자바 class를 먼저 만들고 이를 통해서 DB에 테이블이 자동생성되도록 만드는 것이 가능하다. 
			이때 필요한게 JPA에 있는 인터페이스

	3. 반복적인 CRUD 작업을 생략하게 해준다.
		자바가 CRUD(create:insert, read:select, update, delete)작업을 할 때 
		원래라면 자바가 DB에 데이터 요청을 하고, DB는 세션오픈을 한 후 다시 자바에서 쿼리를 전송하고 DB가 데이터를 전송하고 
		이를 JAVA가 읽을 수 있는 형태로 변경해야 한다.(단순 반복 로직)
		but JPA를 사용하면 이 모든 일련의 작업들을 하나의 함수로 제공함

	4. 영속성 컨텍스트를 가지고 있다.
		영속성: 데이터를 영구적으로 저장 persistance(DB에 저장(MySQL))
		컨텍스트: context
			대상에 대한 모든 정보를 가지고 있다라는 뜻.
		영속성 컨텍스트: 자바가 DB에 저장해야 하는 모든 대상에 대한 정보를 가지고 있다.
			그리고 영속성컨텍스트에 있는 데이터와 DB에 있는 데이터는 동기화되어 있다.
		ex>	
			자바		영속성컨텍스트 			DB
		select(데이터)->	DB에 요청		->데이터
			데이터<-데이터(자바오브젝트 타입)<-데이터(DB 타입)
			위의 3개의 데이터는 동일함(동기화)
			하나의 데이터가 변경되면 다른 곳의 데이터가 update됨 ==>영속성 컨텍스트
		
	5. JPA는 DB와 OOP(객체지향)의 불일치성을 해결하기 위한 방법론을 제공한다.(DB는 객체저장이 불가능하지만 자바는 객체저장이 가능하다)
		테이블에는 기본자료형만 들어가고 object는 들어갈 수 없지만, Java는 object안에 object를 넣을 수 있다.
		자바는 ORM이 있기 때문에 자바가 주도권을 가진 모델을 만들 수 있다.
		이렇게 들어간 데이터는 CRUD할 때 JPA가 자동으로 Mapping함

	6. JPA는 OOP관점에서 모델링 할 수 있게 해준다.(상속, 컴포지션, 연관관계)

	7. 방언처리가 용이하여 Migration하기 좋고 유지보수에도 좋다.
		spring-> JPA-> 추상화객체->DB
			ex> MySQL, 오라클, 마리아, MSSQL...(추상화 객체가 앞의 것으로 바뀜)

서블릿 컨테이너
	URL:자원 접근(spring에서 사용불가), URI:식별자 접근(특정한 파일 요청을 할 수 없다=>요청시에는 반드시 자바를 거친다=> 반드시 톰캣을 거친다.)
	스레드가 많아질수록 처리시간은 증가-> 최적의 스레드 개수가 있음
	클라이언트가 요청(자바)->서블릿컨테이너(자바코드로 웹을 할 수 있는것들을 모아놓음)(톰캣)가 스레드 생성(동시접근을 허용하기 위해)->스레드가 서블릿객체 생성->
	응답을 다하면 스레드가  사라지지 않고 대기중인 요청에 재사용된다. 즉 최초요청일때만 생성되고 계속 재사용된다.

	톰캣
		http: 소켓(시스템콜)
		톰캣 | 웹서버 의 차이
			웹서버: 갑과 을이 존재, 을이 갑한테 요청(request),request할 때는 ip주소를 알아야한다. 
				즉 갑은 을의 ip주소를 몰라도 된다.(요청할때만 응답함)->특정자원의 요청에 대해 응답만 해준다. 특정자원=static자원=정적자원(요청시마다 변경되지 않는 자원)
			톰캣: 웹서버에 톰캣이 달려있으면, 웹서버가 이해할 수 없는 코드(ex>.JSP)를 요청하게 되면 제어권을 톰캣하게 넘긴다.
				이후 톰캣은 .JSP에 있는 모든 자바코드를 컴파일하고, 그 데이터를 .html에 덮어씌운다. 이후 다시 웹서버에 주고 웹서버는 이 .html를 가지고 응답한다.
					만약 톰캣이 없다면 웹서버가 .JSP 파일을 요청 받았을때 그 파일 자체를 넘겨준다면, 요청한 웹브라우저는 .html만 읽을 수 있기 때문에 파일이 깨져버린다.
				즉 톰캣은 .jsp를 요청 받을때 .jsp=>.html로 바꾸는 역할이다.



		web.xml
			하는일:	
				ServletContext의 초기 파라미터
				Session의 유효시간 설정
				Servlet/JSP에 대한 정의
				Servlet/JSP 매핑
				Mime Type 매핑
				Welcome File list
				Error Pages 처리
				리스너/필터 설정
				보안

		FrontController 패턴
			최초 앞단에서 request 요청을 받아서 필요한 클래스를 넘겨준다.(web.xml에 다 정의하기 힘들기 때문)
				특정주소가 들어오면 FrontController로 보내라는 코드를 web.xml에 짠다.
				요청이 URI,혹은 자바파일이면 바로 자원으로 못가고 톰켓으로 간다.->톰켓이 request(요청한 사람의 정보)와 response(응답할 데이터)라는 객체를 만든다.
			이때 내부적으로 FrontController에서 자원으로의 새로운 요청(request)이 생기는데, 기존에 있던 request를 재사용하는 방법이 RequestDispatcher이다. 
			즉 새로운 요청이 생기기 때문에 request와 response가 새롭게 new될 수 있다. 그래서 RequestDispatcher가 필요하다.

		RequestDispatcher(페이지간 데이터이동)
			필요한 클래스 요청이 도달했을 때 FrontController에 도착한 request와 response를 그대로 유지시켜준다.
		
		DispatchServlet(spring에서 제공),(주소분배,new()를 통해 메모리에 띄움)
			FrontController 패턴 + RequestDispatcher
			DispatchServlet이 자동생성되어 질 때 수많은 객체가 생성(IoC)된다. 
			보통 필터들이다. 해당 필터들은 내가 직접 등록할 수 도 있고, 기본적으로 필요한 필터들은 자동 등록되어진다.

		스프링컨테이너
			DispatchServlet에 의해 생성된 수 많은 객체들은 어디에서 관리되는가
								request->web.xml(2)->DispatchServlet(컴포넌트 스캔->정해진 것을 new()를 통해 메모리에 띄움->이후 주소분배)
												(1)->ContextLoaderListener(모든 스레드가 공통적으로 사용해도 되는것들을 띄움,ex>DB)
				1.ApplicationContext
					수많은 객체들이 컴포넌트 스캔을 통해 ApplicationContext에 등록된다. 이것을 IoC라 한다. IoC란 제어의 역전을 의미한다.
					개발자가 직접 new를 통해 객체를 생성하게 된다면 해당 객체를 가르키는 레퍼런스 변수(메모리상에 생성된 인스턴스를 가리키는데 사용되는 변수)를 관리하기 어렵다.
					그래서 스프링이 직접 해당 객체를 관리한다. 필요한 곳에서 ApplicationContext에 접근하여 필요한 객체를 가져올 수 있다.
					ApplicationContext의 종류에는 두 가지가 있는데 root-applicationContext와 servlet-applicationContext)이다
					servlet-applicationContext는 ViewResolver,Interceptor,MultipartResolver 객체를 생성하고
					웹과 관련된 어노테이션들(Controller,RestController)만 스캔해서 메모리에 띄운다.
						==>해당 파일은 DispatchServlet에 의해 실행된다.
					root-applicationContext는 위의 어노테이션을 제외한 어노테이션들을 스캔하고 DB관련 객체를 생성한다.
						==>해당 파일은 ContextLoaderListener에 의해 실행된다. ContextLoaderListener를 실행해주는 녀석은 web.xml이기 때문에 
						root-applicationContext는 servlet-applicationContext보다 먼저 로드된다.
				2.Bean Factory
					필요한 객체를 Bean Factory에 등록할 수도 있다. 여기에 등록하면 초기에 메모리에 로드되지 않고, 필요할 때 getBean()이라는 메소드를 통해 호출하여 메모리에 로드할 수 있다.
					이것 또한 IoC이다. 그리고 필요할 때 DI하여 사용할 수 있다. ApplicationContext와 다른 점은 Bean Factory에 로드되는 객체들은 미리 로드되지 않고
					필요할 때 호출하여 로드하기 때문에 lazy-loading이 된다는 점이다.

		요청주소에 따른 적절한 컨트롤로 요청(Handler Mapping)
			GET요청=> http://localhost:8080/post/1
				해당 주소 요청이 오면 적절한 컨트롤러의 함수를 찾아서 실행한다.
			응답
			html파일을 응답할지 Data를 응답할지 결정해야 하는데 html 파일을 응답하게 되면 ViewResolver가 관여하게 된다.
			하지만 Data를 응답하게 되면 MessageConverter가 작동하게 되는데 메세지를 컨버터할 때 기본전략은 Json이다.

톰캣 실행->web.xml->ContextLoaderListener->root-context.xml(applicationContext.xml)->spring container(root(DB))->request from client->DispatchServlet->servlet-context.xml->spring container




		